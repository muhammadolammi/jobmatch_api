// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: results.sql

package database

import (
	"context"
	"encoding/json"
)

const createResult = `-- name: CreateResult :exec
INSERT INTO results (
result, session_id)
VALUES ( $1, $2)
`

type CreateResultParams struct {
	Result    json.RawMessage
	SessionID string
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) error {
	_, err := q.db.ExecContext(ctx, createResult, arg.Result, arg.SessionID)
	return err
}

const deleteResultBySession = `-- name: DeleteResultBySession :exec
DELETE  FROM results WHERE session_id=$1
`

func (q *Queries) DeleteResultBySession(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteResultBySession, sessionID)
	return err
}

const getAllResults = `-- name: GetAllResults :one
SELECT id, result, session_id, created_at FROM results
`

func (q *Queries) GetAllResults(ctx context.Context) (Result, error) {
	row := q.db.QueryRowContext(ctx, getAllResults)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.Result,
		&i.SessionID,
		&i.CreatedAt,
	)
	return i, err
}

const getResultBySession = `-- name: GetResultBySession :one
SELECT id, result, session_id, created_at FROM results WHERE session_id=$1
`

func (q *Queries) GetResultBySession(ctx context.Context, sessionID string) (Result, error) {
	row := q.db.QueryRowContext(ctx, getResultBySession, sessionID)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.Result,
		&i.SessionID,
		&i.CreatedAt,
	)
	return i, err
}
